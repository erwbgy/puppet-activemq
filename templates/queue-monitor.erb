#!/usr/bin/env perl
use JSON;
use LWP::UserAgent;
use POSIX qw(strftime);
use Sys::Hostname;
use warnings;
use strict;

my $url = 'http://<%= @jolokia_address %>:<%= @jolokia_port %>/jolokia/read/org.apache.activemq:Type=Queue,*';

my $ua  = LWP::UserAgent->new;
my $req = HTTP::Request->new(GET => $url);
my $res = $ua->request($req);

unless ($res->is_success) {
  warn $res->status_line, "\n";
}
else {
  my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
  $year += 1900;
  $mon++;
  $mon  = sprintf("%02d",$mon);
  $mday = sprintf("%02d",$mday);
  my $logfile = "<%= @logdir %>/queue-${year}-${mon}-${mday}.log";

  my $output;
  $output->{'@source'} = $url;
  $output->{'@source_host'} = hostname;
  $output->{'@source_path'} = $logfile;

  my $json = JSON->new();
  $json->canonical(1);
  my $content = $json->decode($res->content);

  my $timestamp = strftime("%F %T", localtime($content->{'timestamp'}));
  $output->{'@timestamp'} = $timestamp;

  open(OUTPUT, ">>$logfile") or die "$!\n";

  foreach my $entry (sort keys %{ $content->{'value'} }) {
    $entry =~ /Destination=(.*?),/;
    my $queue = $1;
    # Timestamp;Destination;AverageEnqueueTime;ConsumerCount;CursorFull;CursorMemoryUsage;CursorPercentUsage;DequeueCount;DispatchCount;EnqueueCount;ExpiredCount;InFlightCount;MemoryLimit;MemoryPercentUsage;MaxEnqueueTime;MemoryUsagePortion;MinEnqueueTime;Name;ProducerCount;ProducerFlowControl;QueueSize;UseCache
    my @message;
    push @message, $timestamp;
    push @message, $queue;
    $output->{'@fields'}{'Timestamp'}   = $timestamp;
    $output->{'@fields'}{'Destination'} = $queue;
    foreach (
      'AverageEnqueueTime',
      'ConsumerCount',
      'CursorFull',
      'CursorMemoryUsage',
      'CursorPercentUsage',
      'DequeueCount',
      'DispatchCount',
      'EnqueueCount',
      'ExpiredCount',
      'InFlightCount',
      'MemoryLimit',
      'MemoryPercentUsage',
      'MaxEnqueueTime',
      'MemoryUsagePortion',
      'MinEnqueueTime',
      'Name',
      'ProducerCount',
      'ProducerFlowControl',
      'QueueSize',
      'UseCache'
    ) {
      push @message, $content->{'value'}{$entry}{$_};
      $output->{'@fields'}{$_} = $content->{'value'}{$entry}{$_};
    }
    $output->{'@message'} = join(';', @message);
    print OUTPUT $json->encode($output) . "\n"
  }
  close(OUTPUT);
}
